
name: Build Publish Spring Boot 

on:
  push:
    branches: [ main ]

jobs:
  build-project:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
      
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      
      - name: Build with Gradle
        env:
          BOOT_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} #used by build.gradle
          BOOT_DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} #used by build.gradle      
        run: |
          ./gradlew bootBuildImage \
          --imageName=docker.io/veecode/spring-gazin-sample-app:latest \
          --publishImage

      - name: Setting up kubectl client
        uses: azure/setup-kubectl@v3
        with:
           version: 'latest' # default is latest stable
        id: install

      - name: Creating K8s Artifacts
        run: |
          mkdir k8s/
          mkdir config/
          touch config/spring-gazin-sample-app.yaml
          kubectl create deployment spring-gazin-sample-app --namespace=veecode-homolog --port=8080 --replicas=1 \
          --image=docker.io/veecode/spring-gazin-sample-app:latest --dry-run=client -o=yaml > ./k8s/deployment.yaml
          yq e '''
          .metadata.labels."backstage.io/kubernetes-id"= "spring-gazin-sample-app" |
          .spec.template.metadata.labels."backstage.io/kubernetes-id"= "spring-gazin-sample-app" |
          .spec.template.spec.containers[0].imagePullPolicy= "IfNotPresent" |
          .spec.template.spec.containers[0].resources.requests.memory= "256Mi" |
          .spec.template.spec.containers[0].resources.limits.memory= "768Mi" |
          .spec.template.metadata.annotations."sidecar.opentelemetry.io/inject"= "true" |
          .spec.template.metadata.annotations."instrumentation.opentelemetry.io/inject-java"= "true" |
          del(.status) | del(.metadata.creationTimestamp) | del(.spec.template.metadata.creationTimestamp) | del(.spec.strategy)
          ''' -i ./k8s/deployment.yaml

          kubectl create service clusterip spring-gazin-sample-app-service-0 --namespace=veecode-homolog \
          --tcp=8080:8080 --dry-run=client -o=yaml > ./k8s/service.yaml
          yq e '''
          .metadata.annotations."sidecar.opentelemetry.io/inject"= "true" |
          .metadata.annotations."instrumentation.opentelemetry.io/inject-java"= "true" |
          del(.metadata.creationTimestamp) | del(.status) |
          .metadata.labels."backstage.io/kubernetes-id"="spring-gazin-sample-app"''' -i ./k8s/service.yaml
          yq e '.spec.selector.app="spring-gazin-sample-app"' -i ./k8s/service.yaml

          kubectl create ingress spring-gazin-sample-app --class=kong --namespace=veecode-homolog \
          --annotation "cert-manager.io/cluster-issuer"="certmanager-issuer" \
          --annotation "konghq.com/https-redirect-status-code"="308" \
          --annotation "kubernetes.io/tls-acme"="true" \
          --annotation "konghq.com/strip-path"="true" \
          --annotation "konghq.com/preserve-host"="true" \
          --annotation "konghq.com/protocols"="https" \
          --annotation "sidecar.opentelemetry.io/inject"="true" \
          --annotation "instrumentation.opentelemetry.io/inject-java"="true" \
          --rule="rest.apr.vee.codes/spring-gazin-sample-app*=spring-gazin-sample-app-service-0:8080,tls=rest.apr.vee.codes-tls" --dry-run=client -o=yaml > ./k8s/ingress.yaml
          yq e 'del(.metadata.creationTimestamp) | del(.status)' -i ./k8s/ingress.yaml
          yq e '.metadata.labels."backstage.io/kubernetes-id"="spring-gazin-sample-app"' -i ./k8s/ingress.yaml

          yq e '''
              .apiVersion="argoproj.io/v1alpha1" |
              .kind="Application" |
              .metadata.name="spring-gazin-sample-app" |
              .metadata.namespace="argocd" |
              .spec.project="default" |
              .spec.source.repoURL="https://github.com/veecode-homolog/argocd-repository.git" |
              .spec.source.targetRevision="main" |
              .spec.source.path="spring-gazin-sample-app/" |
              .spec.syncPolicy.automated.prune=true |
              .spec.destination.server="https://kubernetes.default.svc" |
              .spec.destination.namespace="veecode-homolog"''' -i config/spring-gazin-sample-app.yaml

      - name: Publish K8S Artifact
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          use_rsync: true
          source_file: 'k8s/'
          destination_repo: veecode-homolog/argocd-repository
          destination_folder: '/spring-gazin-sample-app/'
          destination_branch: 'main'
          user_email: 'veecode-bot@vee.codes'
          user_name: 'veecode-bot'
          commit_message: 'Moving k8s spring-gazin-sample-app artefacts'
      
      - name: Publish ArgoCD Application config
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          use_rsync: true
          source_file: 'config/'
          destination_repo: veecode-homolog/argocd-repository
          destination_folder: '/config/'
          destination_branch: 'main'
          user_email: 'veecode-bot@vee.codes'
          user_name: 'veecode-bot'
          commit_message: 'Configuring spring-gazin-sample-app argocd application'

  publish-spec:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      MOCK_SERVER: ""
      NAME: ""    
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/local/bin/yq
          yq --version

      - name: "Check if insomnia workspace is present"
        id: check_inso_workspace
        uses: andstor/file-existence-action@v1
        with:
          files: ".insomnia/ApiSpec/spc_*.yml"

      - name: Setup Insomnia CLI
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        uses: kong/setup-inso@v1
        with:
          inso-version: 3.12.0

      - name: Exporting openapi from insomnia workspace
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        run: |
          inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')"  --output ./openapi-swagger.yaml

      - name: Publishing spec to mockserver
        if: "${{ env.MOCK_SERVER != '' }}"
        continue-on-error: true
        run: |
          NAME=`echo $GITHUB_REPOSITORY |awk -F / '{print $2 }'`
          touch MOCK.yaml
          yq 'with(.paths; with_entries(.key |=strenv(NAME) + .))' ./openapi-swagger.yaml >> MOCK.yaml
          cat MOCK.yaml | python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))' > MOCK.json
          curl --max-time 30 -v -X PUT "${{ env.MOCK_SERVER }}/mockserver/openapi$([ ! -z "$API_KEY" ] && echo "?apikey=")" -d "{"specUrlOrPayload": $(cat $PWD/MOCK.json)}"
          echo "Adding mockserver address to spec"
          yq ".servers += [{\"url\": \"${{ env.MOCK_SERVER }}$([[ ! "${{ env.MOCK_SERVER }}" == */ ]] && echo "/")${NAME}\"}]" -i ./openapi-swagger.yaml

      - name: Build devportal template
        env:
          NAME: ""
          PATH_API: ""
          TAGS: ""
        run: |
          mkdir -p api/
          NAME=`echo $GITHUB_REPOSITORY |awk -F / '{print $2 }'`
          echo $NAME
          touch ".platform/spec-api.yaml"
          sed --in-place "s|\"|'|g" ./openapi-swagger.yaml
          yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i ".platform/spec-api.yaml"
          yq eval ".kind = \"API\" " -i ".platform/spec-api.yaml"
          yq eval ".metadata.name=strenv(NAME)" -i ".platform/spec-api.yaml"
          yq eval ".metadata.title=strenv(NAME)" -i ".platform/spec-api.yaml"
          yq eval ".metadata.publishedAt=\"$(date '+%Y-%m-%d %T')\"" -i ".platform/spec-api.yaml"
          yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i ".platform/spec-api.yaml"
          yq eval ".metadata.tags = (strenv(TAGS) | sub(\" +\", \"\") | split(\",\"))" -i ".platform/spec-api.yaml"
          yq eval ".spec.type = \"openapi\"" -i ".platform/spec-api.yaml"
          yq eval ".spec.lifecycle = \"production\"" -i ".platform/spec-api.yaml"
          yq eval ".spec.owner = \"consumer\"" -i ".platform/spec-api.yaml"
          yq eval ".spec.definition = \"$(yq -I4 ./openapi-swagger.yaml)\"" --inplace ".platform/spec-api.yaml"
      
      - name: Publish spec
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: ".platform/spec-api.yaml"
          commit_user_name: veecode-bot
          commit_user_email: veecode-bot@vee.codes
          commit_author: Veecode Bot <veecode-bot@vee.codes>
          commit_message: "Publish api"
        